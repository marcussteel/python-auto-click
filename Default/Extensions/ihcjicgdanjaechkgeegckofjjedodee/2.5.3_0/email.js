window.chrome=chrome||window.chrome||window.browser,window.chrome.runtime.getURL(""),(()=>{"use strict";Object.freeze({LicenseStateUnknown:0,LicenseStateFree:1,LicenseStateTrial:2,LicenseStateTrialExpired:3,LicenseStateLicensed:4,LicenseStateLicenseExpired:5,LicenseStateLicenseGrace:6});const e="sendTelemetry",s="enableNativeMessaging",o="enableProtection",t="MSG_SETTINGS_SET";let n=window.chrome||window.browser||browser;navigator.userAgent.includes("Edge/")&&(n=window.browser);const i={reload:null},r=e=>new Promise(((s,o)=>{n.runtime.sendMessage({type:"MSG_SETTINGS_GET",payload:e},(function(e){!e||e.error?o(`Error calling settingsGet: ${e?e.error:"No response received"}`):s(e.success)}))})),c=e=>{let s=$(e).parent();e.checked?s.addClass("checked"):s.removeClass("checked"),!0===$(e).prop("disabled")?s.addClass("disabled"):s.removeClass("disabled")},a=async function(a,l,d,g){console.debug("CB: Linking checkbox "+a+" to "+l+" setting"),d&&$(d).addClass("active");let m=document.getElementById(a);await async function(t,n){if(n!==o&&n!==e&&n!==s){console.debug("CB: Linking checkbox "+t.id+" to killswitch");const e=await r(o);$(t).prop("disabled",!1===e)}}(m,l);const u=await r(l);m.checked=l!==s?!1!==u:u,console.debug("CB: Loaded starting value of "+m.checked+" for "+l),c(m),d&&$(d).removeClass("active"),await async function(e,o,r){console.debug("CB: Binding checkbox "+e.id+" to change event"),e.addEventListener("change",(async()=>{let a=$(e).prop("disabled");console.debug("CB: Default state of "+e.id+" is "+(a?"disabled":"active")),$(e).prop("disabled",!0);let l={};var d;l[o]=$(e).prop("checked"),c(e),o===s&&(l[o]?l[o]=await new Promise((e=>{n.permissions.request({permissions:["nativeMessaging"]},(s=>{console.log("MMPPNM: Permissions request resp: ",s),e(s)}))})):l[o]=await new Promise((e=>{n.permissions.remove({permissions:["nativeMessaging"]},(s=>{s?(console.debug("MRNM: Successfully removed permissions"),e(!1)):(console.log("MRNM: Did not remove permissions... ",s),e(!0))}))}))),await(d=l,new Promise(((e,s)=>{n.runtime.sendMessage({type:t,payload:d},(function(o){!o||o.error?s(`Error calling settingsSet: ${o?o.error:"No response received"}`):e(o.success)}))}))),console.debug("CB: Setting has been stored for "+e.id),r&&r(),setTimeout((()=>{console.debug("CB: Restoring "+e.id+" to "+(a?"disabled":"active")),function(e,s){console.debug("CB: Disabled state for "+e.id+" set to "+s),$(e).prop("disabled",s),c(e)}(e,a)}),750),i.reload||(i.reload=n.runtime.connect({name:"RELOAD_ON_CLOSE_PORT"}),console.debug("Began listening for a popup close event"))}))}(m,l,g)};n.i18n.getUILanguage().split("-")[0];let l={noEmailInit:()=>{const e=document.getElementById("email-go");if(!e)return l.success({user_welcomed:!0});e.setAttribute("type","button"),e.addEventListener("click",(()=>l.success({user_welcomed:!0})))},success:e=>{n.storage.sync.set(e,(()=>{console.log("User sync complete - ",e)})),n.runtime.sendMessage({type:t,payload:{enableProtection:!0}},(e=>{!e||e.error?console.log("Error calling settingsSet: ",e?e.error:"No response received"):console.log("Protection layers are enabled")})),console.debug("Redirecting to Dashboard"),window?(console.debug("Redirection to dashboard!"),window.location.href="../app.html"):console.log("Redirection failed - cant access window from this scope!"),n.runtime.sendMessage({type:"MSG_ICONS_REFRESH"})}};document.addEventListener("DOMContentLoaded",(()=>{console.debug("Email screen ready."),$("#telem-opt-in-label").popup({inline:!0,position:"top center"}),((e,s=document)=>{[{id:"welcome-header",msg:"welcomeTitle",sub:""},{id:"tagline",msg:"tagline"},{id:"email-go",msg:"letsGoButton"},{id:"telem-opt-in-label-text",msg:"telemOptInLabel"},{id:"email-pp",msg:"privacyPolicyText"}].forEach((({id:e,msg:o,sub:t=null})=>{const i=s.getElementById(e);i&&(i.textContent=n.i18n.getMessage(o,t))}))})(),document.getElementById("telem-opt-in-label").setAttribute("data-content",n.i18n.getMessage("telemOptInTooltip")),a("telem-consent",e,"#telem-opt-in-label .loader"),n.runtime.sendMessage({type:"MSG_USER_GROUP_GET"},(({success:e,error:s})=>{s?console.error("Error checking user group: ",s):(console.debug("Successfully checked user group: ",e),l.noEmailInit())})),n.windows.getCurrent((e=>{e.height<600&&document.getElementById("malwarebytes-app").classList.add("small-screen")}))}))})();